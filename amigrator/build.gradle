apply plugin: 'com.android.library'
apply from: '../q/q.gradle'
apply plugin: 'jacoco'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    tasks.whenTaskAdded { task ->
        if (task.name == 'assembleDebugUnitTest') {
            task.dependsOn copyDebugTestAssets
        } else if (task.name == 'assembleReleaseUnitTest') {
            task.dependsOn copyReleaseTestAssets
        }
    }

    task copyDebugTestAssets(type: Copy) {
        from "${projectDir}/src/test/assets"
        into "${buildDir}/intermediates/bundles/debug/assets"
    }

    task copyReleaseTestAssets(type: Copy) {
        from "${projectDir}/src/test/assets"
        into "${buildDir}/intermediates/bundles/release/assets"
    }

    task jacocoReport(type: JacocoReport) {
        group = 'Reporting'
        description = 'Generate Jacoco coverage reports after running tests.'

        reports {
            xml {
                enabled = true
                destination "${buildDir}/reports/jacoco/jacoco.xml"
            }
            html {
                enabled = true
                destination "${buildDir}/reports/jacoco"
            }
        }

        classDirectories = fileTree(
                dir: 'build/intermediates/classes/debug',
                excludes: [
                        '**/R*.class',
                        '**/BuildConfig*',
                        '**/*Exception.class',
                        '**/*$$*'
                ]
        )

        sourceDirectories = files('src/main/java')
        executionData = files('build/jacoco/testDebugUnitTest.exec')

        doFirst {
            files('build/intermediates/classes/debug').getFiles().each { file ->
                if (file.name.contains('$$')) {
                    file.renameTo(file.path.replace('$$', '$'))
                }
            }
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

dependencies {
    compile 'com.android.support:support-annotations:25.1.0'
    compile 'commons-io:commons-io:2.4'

    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.1.4'
}

